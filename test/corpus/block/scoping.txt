==========================
scoping
==========================

# result: [5, 7, "FOO"]

foo = 5
result = [foo]

{
  # overwrite existing variable
  foo = "foo"

  # instantiate new variable
  bar = 7

  # "mutate" existing variable
  result = push(result, bar)
}

# variable only exists in inner scope
# this is covered in the `scoping_undefined_variable` test.
# result = push(result, bar)

# variable is overwritten in inner scope
#
# `upcase` proves type definition is also changed
push(result, upcase(foo))

--------------------------

(program
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (integer))
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (ident)))
  (block
    (comment)
    (assignment
      left: (assign_target
        (ident))
      right: (string))
    (comment)
    (assignment
      left: (assign_target
        (ident))
      right: (integer))
    (comment)
    (assignment
      left: (assign_target
        (ident))
      right: (function_call
        function_name: (ident)
        arguments: (argument
          (ident))
        arguments: (argument
          (ident)))))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (function_call
    function_name: (ident)
    arguments: (argument
      (ident))
    arguments: (argument
      (function_call
        function_name: (ident)
        arguments: (argument
          (ident))))))
