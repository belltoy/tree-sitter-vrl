==========================
scoping
==========================

# result: [5, 7, "FOO"]

foo = 5
result = [foo]

{
  # overwrite existing variable
  foo = "foo"

  # instantiate new variable
  bar = 7

  # "mutate" existing variable
  result = push(result, bar)
}

# variable only exists in inner scope
# this is covered in the `scoping_undefined_variable` test.
# result = push(result, bar)

# variable is overwritten in inner scope
#
# `upcase` proves type definition is also changed
push(result, upcase(foo))

--------------------------

(program
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (term
      (integer)))
  (assignment
    left: (assign_target
      (ident))
    right: (term
      (array
        (term
          (ident)))))
  (term
    (block
      (comment)
      (assignment
        left: (assign_target
          (ident))
        right: (term
          (string)))
      (comment)
      (assignment
        left: (assign_target
          (ident))
        right: (term
          (integer)))
      (comment)
      (assignment
        left: (assign_target
          (ident))
        right: (term
          (function_call
            (ident)
            arguments: (argument
              (term
                (ident)))
            arguments: (argument
              (term
                (ident))))))))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (term
    (function_call
      (ident)
      arguments: (argument
        (term
          (ident)))
      arguments: (argument
        (term
          (function_call
            (ident)
            arguments: (argument
              (term
                (ident)))))))))

