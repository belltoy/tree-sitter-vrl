==========================
Array Literals
==========================

# result: [true, 1, "bar"]

# empty
_arr = [ ]

# single
_arr = [true]
_arr = [true,]

# multiple
_arr = [true, 1, "bar"]
_arr = [true, 1, "bar",]

_arr = [
    true,
    1,
    "bar",
]

[
    true,
    1,
    "bar"
]

--------------------------

(program
  (comment)
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (array))
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (boolean)))
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (boolean)))
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (boolean)
      (integer)
      (string)))
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (boolean)
      (integer)
      (string)))
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (boolean)
      (integer)
      (string)))
  (array
    (boolean)
    (integer)
    (string)))

==========================
Array Type Def
==========================

# result: ["foo", 1, "bar", true]

append(["foo", 1], array!(parse_json!(s'["bar", true]')))

--------------------------

(program
  (comment)
  (function_call
    function_name: (ident)
    (arguments
      (array
        (string)
        (integer))
      (function_call
        function_name: (ident)
        (arguments
          (function_call
            function_name: (ident)
            (arguments
              (raw_string))))))))

==========================
Array undefined upgrade
==========================

# result: {"x": [null], "typedef": {"array": {"0": {"null": true}}}}

. = {}

# x is an array of size one that is assigned an undefined value that is upgraded to null
x = [.x]
{"x": x, "typedef": type_def(x)}

--------------------------

(program
  (comment)
  (assignment
    left: (assign_target
      (query
        (event)))
    right: (object))
  (comment)
  (assignment
    left: (assign_target
      (ident))
    right: (array
      (query
        (event)
        (path
          (field)))))
  (object
    (entry
      (key
        (string))
      (value
        (ident)))
    (entry
      (key
        (string))
      (value
        (function_call
          function_name: (ident)
          (arguments
            (ident)))))))
